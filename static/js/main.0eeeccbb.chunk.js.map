{"version":3,"sources":["services/Market.js","components/stock/Stock.js","App.js","serviceWorker.js","index.js"],"names":["object","undefined","stats","handlers","newStocks","marketStatus","websocketUrl","production","development","Market","Object","classCallCheck","this","url","socket","WebSocket","handler","push","stock","filter","value","index","arr","payload","forEach","call","name","status","_this","onopen","publishMarketStatus","console","log","onmessage","event","JSON","parse","data","element","publishNewStock","publish","stringify","onclose","onerror","close","getInstance","Stock","props","possibleConstructorReturn","getPrototypeOf","time","Date","getTime","getStockPrice","updateStock","bind","assertThisInitialized","updateTime","timer","setTimeout","state","color","noRepeat","toLocaleTimeString","setState","parseFloat","toFixed","subscribe","unsubscribe","clearTimeout","react_default","a","createElement","className","React","Component","App","newStock","stocks","init","subscribeForNewStocks","subscribeForMarketStatus","stocksHTML","length","colspan","map","components_stock_Stock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0eeeccbb.chunk.js","sourcesContent":["\nlet object = undefined;\n\nlet stats = {};\n\nlet handlers = {};\n\nlet newStocks = [];\n\nlet marketStatus = [];\n\nlet websocketUrl = {\n    production : 'wss://stocks.mnet.website',\n    development: 'ws://stocks.mnet.website'\n};\n\nclass Market {\n    constructor() {\n        let env = process.env.NODE_ENV || 'development';\n        let url = websocketUrl[env];\n        this.socket = new WebSocket(url);\n    }\n\n    subscribeForNewStocks(handler) {\n        newStocks.push(handler);\n    }\n\n    subscribeForMarketStatus(handler) {\n        marketStatus.push(handler);\n    }\n\n    subscribe(stock, handler) {\n        if(!handlers[stock]) {\n            handlers[stock] = [];\n        }\n        handlers[stock].push(handler);\n    }\n\n    unsubscribe(stock, handler) {\n        if(handlers[stock]) {\n            handlers[stock] = [].filter((value, index, arr) => {\n                return handler !== value;\n            });\n        }\n    }\n\n    publish(stock, payload) {\n        if(handlers[stock]) {\n            let arr = handlers[stock];\n            arr.forEach(handler => {\n                handler.call(null, payload);\n            });\n        }\n    }\n\n    publishNewStock(name) {\n        newStocks.forEach(handler => {\n            handler.call(null, name);\n        });\n    }\n\n    publishMarketStatus(status) {\n        marketStatus.forEach(handler => {\n            handler.call(null, status);\n        });\n    }\n\n    init() {\n        this.socket.onopen = () => {\n            this.publishMarketStatus('The market is up and moving, Connection OK');\n            console.log('Connected!');\n        };\n        this.socket.onmessage = (event) => {\n            // console.log('Received data: ' + event.data);\n            let data = JSON.parse(event.data);\n            data.forEach(element => {\n                let name = element[0];\n                let stock = element[1];\n                // check if it is a new stock\n                if(!stats[name]) {\n                    this.publishNewStock(name);\n                }\n                stats[name] = stock;\n                this.publish(name, stock);\n            });\n            console.log(JSON.stringify(stats));\n        };\n        this.socket.onclose = () => {\n            this.publishMarketStatus('The market seems closed for now, Connection Lost');\n            console.log('Lost connection!');\n        };\n        this.socket.onerror = () => {\n            this.publishMarketStatus(`There's too much chaos in the market, some ERROR occured`);\n            console.log('Error!');\n        };\n    }\n\n    close() {\n        this.socket.close();\n    }\n\n    getStockPrice(name) {\n        return stats[name]? stats[name] : 0;\n    }\n\n    /**\n     * @returns {Market}\n     */\n    static getInstance() {\n        if(object === undefined) {\n            object = new Market();\n        }\n        return object;\n    }\n}\n\nexport default Market;","\nimport React from 'react';\nimport './Stock.css';\nimport Market from '../../services/Market';\n\nMarket.getInstance()\n\nclass Stock extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.name = props.name;\n        this.time = new Date().getTime();\n        this.stock = Market.getInstance().getStockPrice(this.name);\n        this.updateStock = this.updateStock.bind(this);\n        this.updateTime = this.updateTime.bind(this);\n        this.timer = setTimeout(this.updateTime, 1000);\n        this.state = {name : props.name, time : '', stock : '', color : 'normal'};\n    }\n\n    updateTime(noRepeat) {\n        // check for stock price\n        let time = new Date().getTime();\n        time -= this.time;\n        if(time < 30000) {\n            time = 'Few seconds ago';\n        } else if(time < 6000) {\n            time = 'Minute(s) ago';\n        } else {\n            time = new Date(this.time).toLocaleTimeString();\n        }\n        this.setState({\n            time : time\n        });\n        if(!noRepeat) {\n            this.timer = setTimeout(this.updateTime, 5000);\n        }\n    }\n\n    updateStock(stock) {\n        // check the latest update\n        let color = '';\n\n        this.stock = parseFloat(this.stock);\n        stock = parseFloat(stock).toFixed(2);\n\n        if(this.stock < stock) {\n            color = 'high';\n        } else if(this.stock > stock) {\n            color = 'low';\n        } else {\n            color = 'normal';\n        }\n        this.stock = stock;\n        this.setState({\n            stock : stock,\n            color : color\n        });\n        this.time = new Date().getTime();\n        this.updateTime(true);\n    }\n\n    componentDidMount() {\n        Market.getInstance().subscribe(this.name, this.updateStock);\n    }\n\n    componentWillUnmount() {\n        Market.getInstance().unsubscribe(this.name, this.updateStock);\n        clearTimeout(this.timer);\n    }\n\n    render() {\n        let content = \n            <tr>\n                <td>{this.state.name}</td>\n                <td className={this.state.color}>{this.state.stock}</td>\n                <td className='timeUpdated'>{this.state.time}</td>\n            </tr>\n        ;\n        return content;\n    }\n\n}\n\nexport default Stock;","import React from 'react';\nimport './App.css';\nimport Stock from './components/stock/Stock';\nimport Market from './services/Market';\n\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.newStock = this.newStock.bind(this);\n\t\tthis.marketStatus = this.marketStatus.bind(this);\n\t\tthis.state = {\n\t\t\tstocks : [],\n\t\t\tstatus : ''\n\t\t};\n\t}\n\n\tnewStock(stock) {\n\t\tdebugger;\n\t\tlet stocks = this.state.stocks;\n\t\tstocks.push(stock);\n\t\tthis.setState({\n\t\t\tstocks : stocks\n\t\t});\n\t}\n\n\tmarketStatus(status) {\n\t\tthis.setState({\n\t\t\tstatus : status\n\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tMarket.getInstance().init();\n\t\tMarket.getInstance().subscribeForNewStocks(this.newStock);\n\t\tMarket.getInstance().subscribeForMarketStatus(this.marketStatus);\n\t\t\n\t}\n\n\trender() {\n\t\tlet stocksHTML = '';\n\t\tif(this.state.stocks.length === 0) {\n\t\t\tstocksHTML = <tr><td colspan='3'>Loading ...</td></tr>;\n\t\t} else {\n\t\t\tstocksHTML = this.state.stocks.map(stock => {\n\t\t\t\treturn <Stock name={stock} />\n\t\t\t});\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>{this.state.status}</h1>\n\t\t\t\t\t{/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>Stock</td>\n\t\t\t\t\t\t\t\t\t<td>Price</td>\n\t\t\t\t\t\t\t\t\t<td>Last Update</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{stocksHTML}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}